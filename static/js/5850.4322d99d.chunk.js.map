{"version":3,"file":"static/js/5850.4322d99d.chunk.js","mappings":"iHAAA,WAAgB,GAAG,moEAqDnB,GAAG,+rEAyDH,IAAI,0pJAqGJ,IAAI,++JA0GJ,IAAI,+6DAiDJ,IAAI","sources":[".docs/examplessrcappApp/importCopyNodeRender.js"],"sourcesContent":["export default {19: `import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Alert, ButtonGroup, Button } from \"uiw\";\n\nclass Demo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      visible1: false,\n      visible2: false,\n    };\n  }\n  onClick(type) {\n    this.setState({ [type]: !this.state[type] });\n  }\n  onClosed(type) {\n    this.setState({ [type]: false });\n  }\n  render() {\n    return (\n      <div>\n        <Alert\n          isOpen={this.state.visible1}\n          confirmText=\"确定按钮\"\n          onClosed={this.onClosed.bind(this, \"visible1\")}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        />\n        <Alert\n          isOpen={this.state.visible2}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          type=\"danger\"\n          onConfirm={() => console.log(\"您点击了确定按钮！\")}\n          onCancel={() => console.log(\"您点击了取消按钮！\")}\n          onClosed={this.onClosed.bind(this, \"visible2\")}\n        >\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\n          后，此对话框将关闭，触发 “<b>onConfirm</b>” 或 “<b>onCancel</b>”\n          事件。用作通知用户重要信息。\n        </Alert>\n        <ButtonGroup>\n          <Button onClick={this.onClick.bind(this, \"visible1\")}>\n            单个按钮确认对话框\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible2\")}>\n            确认对话框\n          </Button>\n        </ButtonGroup>\n      </div>\n    );\n  }\n}\nexport default Demo;`,\n81: `import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Alert, Button } from \"uiw\";\n\nclass Demo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      visible: false,\n    };\n  }\n  onClick() {\n    this.setState({ visible: !this.statevisible });\n  }\n  onClosed() {\n    this.setState({ visible: false });\n  }\n  render() {\n    return (\n      <div>\n        <Alert\n          icon=\"delete\"\n          isOpen={this.state.visible}\n          confirmText=\"确定按钮\"\n          type=\"danger\"\n          onConfirm={() => {\n            console.log(\"确定回调！, 这里是利用Promise等执行完成再去关闭窗口\");\n            return new Promise((resolve, reject) => {\n              const random = Math.random();\n              console.log(\n                \"测试，随机值大于 0.5 执行 resolve 事件，否则 执行 reject 触发 catch 错误\",\n                random,\n                random > 0.5\n              );\n              setTimeout(random > 0.5 ? resolve : reject, 3000);\n            }).catch(() => {\n              // 可以通过下面方式，阻止弹框消失\n              // throw new Error();\n            });\n          }}\n          onClosed={this.onClosed.bind(this, \"visible\")}\n        >\n          这里是利用 <b>Promise</b>{\" \"}\n          的特性，等它执行完成后，再去关闭窗口，达到延迟关闭的效果。\n          <br />\n          <br />\n          这个测试例子，生成随机值判断是否大于 <b>0.5</b> 执行 <b>resolve</b> 事件，否则\n          执行 <b>reject</b> 触发 <b>catch</b> 错误。\n        </Alert>\n        <Button onClick={this.onClick.bind(this, \"visible\")}>\n          延迟关闭对话框\n        </Button>\n      </div>\n    );\n  }\n}\nexport default Demo;`,\n147: `import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Alert, ButtonGroup, Button } from \"uiw\";\n\nclass Demo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      visible1: false,\n      visible2: false,\n    };\n  }\n  onClick(type) {\n    this.setState({ [type]: !this.state[type] });\n  }\n  onClosed(type) {\n    this.setState({ [type]: false });\n  }\n  render() {\n    return (\n      <div>\n        <Alert\n          isOpen={this.state.visible1}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          icon=\"information\"\n          type=\"primary\"\n          onClosed={this.onClosed.bind(this, \"visible1\")}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        />\n        <Alert\n          isOpen={this.state.visible2}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          icon=\"circle-check\"\n          type=\"success\"\n          onClosed={this.onClosed.bind(this, \"visible2\")}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        />\n        <Alert\n          isOpen={this.state.visible3}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          icon=\"warning\"\n          type=\"warning\"\n          onClosed={this.onClosed.bind(this, \"visible3\")}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        />\n        <Alert\n          isOpen={this.state.visible4}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          icon=\"circle-close\"\n          type=\"danger\"\n          onClosed={this.onClosed.bind(this, \"visible4\")}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        />\n        <Alert\n          isOpen={this.state.visible5}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          type=\"light\"\n          onClosed={this.onClosed.bind(this, \"visible5\")}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        />\n        <Alert\n          isOpen={this.state.visible6}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          type=\"dark\"\n          onClosed={this.onClosed.bind(this, \"visible6\")}\n        >\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\n          后，此对话框将关闭，触发 “<b>onConfirm</b>” 或 “<b>onCancel</b>”\n          事件。用作通知用户重要信息。\n        </Alert>\n        <ButtonGroup>\n          <Button onClick={this.onClick.bind(this, \"visible1\")} type=\"primary\">\n            主要\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible2\")} type=\"success\">\n            成功\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible3\")} type=\"warning\">\n            警告\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible4\")} type=\"danger\">\n            错误\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible5\")} type=\"light\">\n            亮按钮\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible6\")} type=\"dark\">\n            暗按钮\n          </Button>\n        </ButtonGroup>\n      </div>\n    );\n  }\n}\nexport default Demo;`,\n255: `import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Alert, ButtonGroup, Button } from \"uiw\";\n\nclass Demo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      visible1: false,\n      visible2: false,\n    };\n  }\n  onClick(type) {\n    this.setState({ [type]: !this.state[type] });\n  }\n  onClosed(type) {\n    this.setState({ [type]: false });\n  }\n  render() {\n    return (\n      <div>\n        <Alert\n          title=\"带标题的弹出框\"\n          isOpen={this.state.visible1}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          icon=\"information\"\n          type=\"primary\"\n          onClosed={this.onClosed.bind(this, \"visible1\")}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        />\n        <Alert\n          title=\"带标题的弹出框\"\n          isOpen={this.state.visible2}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          type=\"success\"\n          onClosed={this.onClosed.bind(this, \"visible2\")}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        />\n        <Alert\n          title=\"带标题的弹出框\"\n          isOpen={this.state.visible3}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          icon=\"warning\"\n          type=\"warning\"\n          onClosed={this.onClosed.bind(this, \"visible3\")}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        />\n        <Alert\n          title=\"带标题的弹出框\"\n          isOpen={this.state.visible4}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          icon=\"circle-close\"\n          type=\"danger\"\n          onClosed={this.onClosed.bind(this, \"visible4\")}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        />\n        <Alert\n          title=\"带标题的弹出框\"\n          isOpen={this.state.visible5}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          type=\"light\"\n          onClosed={this.onClosed.bind(this, \"visible5\")}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        />\n        <Alert\n          title=\"带标题的弹出框\"\n          isOpen={this.state.visible6}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          type=\"dark\"\n          onClosed={this.onClosed.bind(this, \"visible6\")}\n        >\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\n          后，此对话框将关闭，触发 “<b>onConfirm</b>” 或 “<b>onCancel</b>”\n          事件。用作通知用户重要信息。\n        </Alert>\n        <ButtonGroup>\n          <Button onClick={this.onClick.bind(this, \"visible1\")} type=\"primary\">\n            主要\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible2\")} type=\"success\">\n            成功\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible3\")} type=\"warning\">\n            警告\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible4\")} type=\"danger\">\n            错误\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible5\")} type=\"light\">\n            亮按钮\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible6\")} type=\"dark\">\n            暗按钮\n          </Button>\n        </ButtonGroup>\n      </div>\n    );\n  }\n}\nexport default Demo;`,\n370: `import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Alert, ButtonGroup, Button } from \"uiw\";\n\nclass Demo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      visible: false,\n    };\n  }\n  onClick(type) {\n    this.setState({ visible: !this.state.visible });\n  }\n  onClosed(type) {\n    this.setState({ visible: false });\n  }\n  render() {\n    return (\n      <div>\n        <Alert\n          isOpen={this.state.visible}\n          type=\"danger\"\n          useButton={false}\n          maskClosable={true}\n          onClose={this.onClosed.bind(this)}\n          // onClosed={this.onClosed.bind(this)}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        >\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\n          后，此对话框将关闭，将不触发 “<del>onConfirm</del>” 或 “\n          <del>onCancel</del>” 事件。因为这俩按钮是自定义按钮。\n          <br />\n          <br />\n          <div className=\"w-alert-footer\">\n            <Button type=\"danger\" onClick={this.onClosed.bind(this)}>\n              确定按钮\n            </Button>\n            <Button onClick={this.onClosed.bind(this)}>取消按钮</Button>\n          </div>\n        </Alert>\n        <ButtonGroup>\n          <Button onClick={this.onClick.bind(this)}>单个按钮确认对话框</Button>\n        </ButtonGroup>\n      </div>\n    );\n  }\n}\nexport default Demo;`,\n426: `import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Alert, ButtonGroup, Button } from \"uiw\";\n\nclass Demo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      visible: false,\n    };\n  }\n  onClick(type) {\n    this.setState({ visible: !this.state.visible });\n  }\n  onClosed(type) {\n    this.setState({ visible: false });\n  }\n  render() {\n    return (\n      <div>\n        <Alert\n          isOpen={this.state.visible}\n          type=\"danger\"\n          maskClosable={true}\n          hasBackdrop={false}\n          onClose={this.onClosed.bind(this)}\n          onClosed={this.onClosed.bind(this)}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        >\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\n          后，此对话框将关闭，将不触发 “<del>onConfirm</del>” 或 “\n          <del>onCancel</del>” 事件。因为这俩按钮是自定义按钮。\n        </Alert>\n        <ButtonGroup>\n          <Button onClick={this.onClick.bind(this)}>单个按钮确认对话框</Button>\n        </ButtonGroup>\n      </div>\n    );\n  }\n}\nexport default Demo;`,\n}"],"names":[],"sourceRoot":""}